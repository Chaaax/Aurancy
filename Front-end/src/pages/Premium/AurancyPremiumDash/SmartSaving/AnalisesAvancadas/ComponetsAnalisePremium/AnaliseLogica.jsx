// src/components/Analises/AnaliseLogica.jsx

// Esta fun√ß√£o recebe os dados do utilizador e retorna os resultados das an√°lises selecionadas
export function gerarAnalisesSelecionadas({ 
  savingData,
  despesasMes,
  analisesAtivas,
  mes,
  ano 
}) {

  const resultados = [];

  const totalDespesas = despesasMes.reduce((acc, d) => acc + d.valor, 0);
  const diasDoMes = new Date(ano, mes, 0).getDate();
  const poupancaMensal = savingData.poupancaMensal;
  const rendimentoMensal = savingData.rendimentoMensal;
  const objetivo = savingData.objetivoPoupanca;
  const valorObjetivo = savingData.valorObjetivo;
  const maiorGasto = savingData.maioresGastos || [];
  const reduziveis = savingData.categoriasReduzir || [];

  const percentagemPoupada = ((poupancaMensal / rendimentoMensal) * 100).toFixed(1);

  const categorias = {};
  despesasMes.forEach(d => {
    if (!categorias[d.categoria]) categorias[d.categoria] = 0;
    categorias[d.categoria] += d.valor;
  });

/*************************Obejeticos e poupan√ßas**************** */
  if (analisesAtivas.includes("objetivo")) {
    const mesesRestantes = Math.ceil((valorObjetivo - (poupancaMensal || 0)) / (poupancaMensal || 1));
    resultados.push(`‚úâÔ∏è Est√°s a poupar ${poupancaMensal}‚Ç¨/m√™s para atingir ${objetivo} (${valorObjetivo}‚Ç¨). A este ritmo, atinges em ${mesesRestantes} meses.`);
  }

  if (analisesAtivas.includes("poupancaIdeal")) {
    const ideal = savingData.nivelRisco === "Conservador" ? 0.3 : savingData.nivelRisco === "Moderado" ? 0.2 : 0.1;
    resultados.push(`üî¢ Com perfil ${savingData.nivelRisco}, o ideal seria poupares ${(ideal*100).toFixed(0)}%. Est√°s a poupar ${percentagemPoupada}%.`);
  }

  if (analisesAtivas.includes("atingirObjetivo")) {
    const poupancaReal = rendimentoMensal - totalDespesas;
    const falta = valorObjetivo - poupancaReal;
    const meses = Math.ceil(falta / (poupancaMensal || 1));

    const nomeMesAtual = new Date().toLocaleString("pt-PT", { month: "long" });
    resultados.push(`üï∞Ô∏è No m√™s de ${nomeMesAtual}, poupaste ${poupancaReal.toFixed(2)}‚Ç¨. A este ritmo, atinges o objetivo de ${valorObjetivo}‚Ç¨ em aproximadamente ${meses} meses.`);
  }

  if (analisesAtivas.includes("poupancaPotencial")) {
  const categoriasReduzir = savingData.categoriasReduzir || [];
  let poupancaExtra = 0;

  categoriasReduzir.forEach(cat => {
    if (categorias[cat]) {
      poupancaExtra += categorias[cat] * 0.3; // Assumimos um corte de 30%
    }
  });

  if (poupancaExtra > 0) {
    resultados.push(`üìâ Se reduzires 30% nas categorias que aceitaste reduzir, poder√°s poupar mais ${poupancaExtra.toFixed(2)}‚Ç¨ por m√™s.`);
  } else {
    const categoriasReducao = savingData.categoriasReduzir?.join(", ") || "categorias indefinidas";
    resultados.push(`üìâ Indicaste que queres reduzir gastos em: ${categoriasReducao}, mas ainda n√£o registaste despesas relevantes nessas categorias este m√™s.`);
  }

}

if (analisesAtivas.includes("metasFinanceiras")) {
  const poupancaRecomendada = rendimentoMensal * 0.2;
  const poupancaPercentual = (poupancaMensal / rendimentoMensal) * 100;

  if (poupancaPercentual >= 20) {
    resultados.push(`üéØ Excelente! Est√°s a poupar ${poupancaMensal}‚Ç¨ (${poupancaPercentual.toFixed(1)}%) ‚Äî acima da meta recomendada de 20%! Continua assim, √©s uma inspira√ß√£o financeira! üí™`);
  } else {
    const falta = poupancaRecomendada - poupancaMensal;
    resultados.push(`üßê A meta comum √© poupar 20% do rendimento (${poupancaRecomendada.toFixed(2)}‚Ç¨), mas est√°s a poupar ${poupancaMensal}‚Ç¨ (${poupancaPercentual.toFixed(1)}%). Bora l√° cortar uns caf√©s ou nos finos depois do trabalho? üòÖ`);
  }
}
/*****************************Despesas e comportamentos***************** */

if (analisesAtivas.includes("gastosAltos")) {
  const limiteCategoria = rendimentoMensal * 0.3;
  const categoriasAcima = Object.entries(categorias)
    .filter(([_, valor]) => valor > limiteCategoria);

  if (categoriasAcima.length > 0) {
    categoriasAcima.forEach(([cat, val]) => {
      resultados.push(`üö® Gastaste ${val.toFixed(2)}‚Ç¨ em "${cat}", que ultrapassa o limite recomendado de 30% do teu rendimento (${limiteCategoria.toFixed(2)}‚Ç¨).`);
    });
  } else {
    resultados.push("‚úÖ Nenhuma categoria ultrapassou 30% do teu rendimento. Boa gest√£o! üëè");
  }
}

if (analisesAtivas.includes("reduziveis")) {
  const gastosReduziveis = reduziveis
    .filter((cat) => categorias[cat])
    .map((cat) => `${cat} (${categorias[cat].toFixed(2)}‚Ç¨)`);

  if (gastosReduziveis.length > 0) {
    resultados.push(`üòÖ Disseste que querias cortar em: ${gastosReduziveis.join(", ")}, mas parece que o cart√£o n√£o recebeu o memo...`);
  } else {
    resultados.push(`üßò‚Äç‚ôÇÔ∏è Prometeste cortar em ${reduziveis.join(", ")}, e at√© agora est√°s zen ‚Äì sem excessos nessas √°reas. Nice!`);
  }
}

if (analisesAtivas.includes("gastosSup√©rfluos")) {
  const maiores = (savingData.maioresGastos || []).map((c) => c.toLowerCase());

  const categoriasEssenciais = [
    "supermercado",
    "habita√ß√£o",
    "renda",
    "transporte",
    "combust√≠vel",
    "educa√ß√£o",
    "servi√ßos p√∫blicos",
    "alimenta√ß√£o"
  ];

  const suspeitos = [];

  for (const [cat, valor] of Object.entries(categorias)) {
    const nome = cat.toLowerCase();

    const naoPrioritaria = !maiores.includes(nome);
    const naoEssencial = !categoriasEssenciais.includes(nome);
    const valorBaixo = valor < rendimentoMensal * 0.15;

    if (naoPrioritaria && naoEssencial && valorBaixo) {
      suspeitos.push(`${cat} (${valor.toFixed(2)}‚Ç¨)`);
    }
  }

  if (suspeitos.length > 0) {
    resultados.push(
      `üí∏ Detet√°mos gastos em categorias n√£o priorit√°rias nem essenciais: ${suspeitos.join(", ")}. Talvez possas cortar a√≠ sem grande impacto. üòâ`
    );
  } else {
    resultados.push(`üîç N√£o foram identificados gastos sup√©rfluos relevantes este m√™s. Bom controlo!`);
  }
}

if (analisesAtivas.includes("desviosPlano")) {
  const limitePlaneado = rendimentoMensal - poupancaMensal;
  const diferenca = totalDespesas - limitePlaneado;

  if (diferenca > 0) {
    resultados.push(`üö® Est√°s a gastar ${diferenca.toFixed(2)}‚Ç¨ acima do teu plano mensal (devias gastar no m√°ximo ${limitePlaneado.toFixed(2)}‚Ç¨). Aten√ß√£o!`);
  } else {
    resultados.push(`‚úÖ Est√°s dentro do teu plano de gastos este m√™s. Excelente disciplina financeira!`);
  }
}



  if (analisesAtivas.includes("evolucao")) {
    resultados.push(`üìà As tuas despesas acumuladas at√© agora s√£o de ${totalDespesas}‚Ç¨.`);
  }


if (analisesAtivas.includes("alertaExcesso")) {
  const categoriasEssenciais = [
    "renda",  "supermercado", "√°gua", "luz", "eletricidade", "g√°s", "transportes", "passe", "combust√≠vel"
  ];

  const gastosExcesso = Object.entries(categorias).filter(([cat, val]) => {
    const catLower = cat.toLowerCase();
    const isEssencial = categoriasEssenciais.some((essencial) =>
      catLower.includes(essencial)
    );
    return !isEssencial && val > 200;
  });

  if (gastosExcesso.length === 0) {
    resultados.push("‚úÖ Nenhum gasto excessivo em categorias n√£o essenciais. Bom controlo este m√™s!");
  } else {
    for (const [cat, val] of gastosExcesso) {
      const catLower = cat.toLowerCase();
      let comentarioExtra = "";

      if (catLower.includes("restaurante")) {
        comentarioExtra = "üçù √âs cliente VIP dos restaurantes este m√™s?";
      } else if (catLower.includes("roupa")) {
        comentarioExtra = "üß• Est√°s a construir um guarda-roupa para o inverno nuclear?";
      } else if (catLower.includes("tecnologia")) {
        comentarioExtra = "üì± Compraste o novo telem√≥vel qu√¢ntico, foi?";
      } else if (catLower.includes("lazer") || catLower.includes("jogos")) {
        comentarioExtra = "üéÆ Parece que a divers√£o n√£o tem pre√ßo... mas teve!";
      } else if (catLower.includes("viagens")) {
        comentarioExtra = "‚úàÔ∏è A tua conta banc√°ria tamb√©m viajou?";
      } else {
        comentarioExtra = "üòÖ Passaste dos limites nesta categoria!";
      }

      resultados.push(`üö® Gastaste ${val.toFixed(2)}‚Ç¨ em ${cat}. ${comentarioExtra}`);
    }
  }
}

/***************** Estat√≠sticas e Tend√™ncias*************** */

  if (analisesAtivas.includes("categoriasMais")) {
    const top = Object.entries(categorias)
      .sort((a, b) => b[1] - a[1])
      .slice(0, 3)
      .map(([cat, val]) => `${cat} (${val}‚Ç¨)`)
      .join(", ");
    resultados.push(`üåü Top categorias: ${top}`);
  }

if (analisesAtivas.includes("variacaoMensal")) {
  const picosPorCategoria = {};

  despesasMes.forEach(d => {
    if (!picosPorCategoria[d.categoria]) {
      picosPorCategoria[d.categoria] = {};
    }
    const dia = new Date(d.data).getDate();
    picosPorCategoria[d.categoria][dia] = (picosPorCategoria[d.categoria][dia] || 0) + d.valor;
  });

  const frasesPico = [];

  Object.entries(picosPorCategoria).forEach(([categoria, dias]) => {
    const total = Object.values(dias).reduce((a, b) => a + b, 0);
    const maiorDia = Math.max(...Object.values(dias));
    const percentagem = ((maiorDia / total) * 100).toFixed(0);

    if (percentagem >= 60 && total > 50) {
      frasesPico.push(`"${categoria}" (${percentagem}%)`);
    }
  });

  if (analisesAtivas.includes("percentagemPoupada")) {
    resultados.push(`‚≠êÔ∏è Est√°s a poupar ${percentagemPoupada}% do teu rendimento.`);
  }


  if (frasesPico.length > 0) {
    const top3 = frasesPico.slice(0, 3).join(", ");
    resultados.push(`‚ö° Picos de despesa num s√≥ dia detetados em: ${top3}.`);
  }
}

  if (analisesAtivas.includes("progressoMes")) {
    resultados.push(`‚åõ Este m√™s j√° gastaste ${totalDespesas}‚Ç¨ de ${rendimentoMensal}‚Ç¨ (${((totalDespesas/rendimentoMensal)*100).toFixed(1)}%).`);
  }

/****************************Intelig√™ncia Financeira************************* */

  if (analisesAtivas.includes("recomendacoesIA")) {
    resultados.push("ü§ñ Sugest√£o: Est√°s a gastar muito em subscri√ß√µes? Considera cancelar alguma que n√£o uses.");
  }

  if (analisesAtivas.includes("projecao")) {
    const mediaDiaria = totalDespesas / (new Date().getDate());
    const projecao = mediaDiaria * diasDoMes;
    resultados.push(`üîÆ Mantendo o ritmo atual, vais gastar cerca de ${projecao.toFixed(2)}‚Ç¨ este m√™s.`);
  }

  if (analisesAtivas.includes("categoriaRisco")) {
    for (const [cat, val] of Object.entries(categorias)) {
      if (val / totalDespesas > 0.5) {
        resultados.push(`üí• ${cat} representa mais de 50% das tuas despesas.`);
      }
    }
  }

    if (analisesAtivas.includes("analiseCompleta")) {
    resultados.push(`üß† An√°lise geral: ${percentagemPoupada}% poupado, ${totalDespesas}‚Ç¨ gastos, objetivo: ${objetivo}.`);
  }



  return resultados;
}
